# coding: utf-8

"""
    SRF Weather

    SRF Meteo serves weather forecast for over 100'000 locations within Switzerland  # noqa: E501

    The version of the OpenAPI document: 1.0.4
    Contact: api@srgssr.ch
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import List
from pydantic import BaseModel, Field, conlist
from srf_weather.models.day import Day
from srf_weather.models.model60minute import Model60minute

class Forecast2(BaseModel):
    """
    Forecast2
    """
    day: conlist(Day) = ...
    __properties = ["day"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Forecast2:
        """Create an instance of Forecast2 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in var_60minutes (list)
        _items = []
        if self.var_60minutes:
            for _item in self.var_60minutes:
                if _item:
                    _items.append(_item.to_dict())
            _dict['60minutes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in day (list)
        _items = []
        if self.day:
            for _item in self.day:
                if _item:
                    _items.append(_item.to_dict())
            _dict['day'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in hour (list)
        _items = []
        if self.hour:
            for _item in self.hour:
                if _item:
                    _items.append(_item.to_dict())
            _dict['hour'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Forecast2:
        """Create an instance of Forecast2 from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return Forecast2.parse_obj(obj)

        _obj = Forecast2.parse_obj({
            "var_60minutes": [Model60minute.from_dict(_item) for _item in obj.get("60minutes")] if obj.get("60minutes") is not None else None,
            "day": [Day.from_dict(_item) for _item in obj.get("day")] if obj.get("day") is not None else None,
            "hour": [Model60minute.from_dict(_item) for _item in obj.get("hour")] if obj.get("hour") is not None else None
        })
        return _obj

