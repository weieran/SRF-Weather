# coding: utf-8

"""
    SRF Weather

    SRF Meteo serves weather forecast for over 100'000 locations within Switzerland  # noqa: E501

    The version of the OpenAPI document: 1.0.4
    Contact: api@srgssr.ch
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictInt, StrictStr, ConstrainedFloat
from srf_weather.models.min_maxcolor import MinMaxcolor

class Day(BaseModel):
    """
    Day
    """
    local_date_time: StrictStr = ...
    tx_c: StrictInt = Field(..., alias="TX_C")
    tn_c: StrictInt = Field(..., alias="TN_C")
    probpcp_percent: StrictInt = Field(..., alias="PROBPCP_PERCENT")
    rrr_mm: ConstrainedFloat = Field(..., alias="RRR_MM")
    ff_kmh: StrictInt = Field(..., alias="FF_KMH")
    fx_kmh: StrictInt = Field(..., alias="FX_KMH")
    dd_deg: StrictInt = Field(..., alias="DD_DEG")
    sunset: StrictInt = Field(..., alias="SUNSET")
    sunrise: StrictInt = Field(..., alias="SUNRISE")
    sun_h: StrictInt = Field(..., alias="SUN_H")
    symbol_code: StrictInt = Field(..., alias="SYMBOL_CODE")
    type: StrictStr = ...
    min_color: MinMaxcolor = ...
    max_color: MinMaxcolor = ...
    __properties = ["local_date_time", "TX_C", "TN_C", "PROBPCP_PERCENT", "RRR_MM", "FF_KMH", "FX_KMH", "DD_DEG", "SUNSET", "SUNRISE", "SUN_H", "SYMBOL_CODE", "type", "min_color", "max_color"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Day:
        """Create an instance of Day from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of min_color
        if self.min_color:
            _dict['min_color'] = self.min_color.to_dict()
        # override the default output from pydantic by calling `to_dict()` of max_color
        if self.max_color:
            _dict['max_color'] = self.max_color.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Day:
        """Create an instance of Day from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return Day.parse_obj(obj)

        _obj = Day.parse_obj({
            "local_date_time": obj.get("local_date_time"),
            "tx_c": obj.get("TX_C"),
            "tn_c": obj.get("TN_C"),
            "probpcp_percent": obj.get("PROBPCP_PERCENT"),
            "rrr_mm": obj.get("RRR_MM"),
            "ff_kmh": obj.get("FF_KMH"),
            "fx_kmh": obj.get("FX_KMH"),
            "dd_deg": obj.get("DD_DEG"),
            "sunset": obj.get("SUNSET"),
            "sunrise": obj.get("SUNRISE"),
            "sun_h": obj.get("SUN_H"),
            "symbol_code": obj.get("SYMBOL_CODE"),
            "type": obj.get("type"),
            "min_color": MinMaxcolor.from_dict(obj.get("min_color")) if obj.get("min_color") is not None else None,
            "max_color": MinMaxcolor.from_dict(obj.get("max_color")) if obj.get("max_color") is not None else None
        })
        return _obj

