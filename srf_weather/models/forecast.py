# coding: utf-8

"""
    SRF Weather

    SRF Meteo serves weather forecast for over 100'000 locations within Switzerland  # noqa: E501

    The version of the OpenAPI document: 1.0.4
    Contact: api@srgssr.ch
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel
from srf_weather.models.forecast2 import Forecast2
from srf_weather.models.geolocation import Geolocation

class Forecast(BaseModel):
    """
    Forecast
    """
    geolocation: Geolocation = ...
    forecast: Forecast2 = ...
    __properties = ["geolocation", "forecast"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Forecast:
        """Create an instance of Forecast from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of geolocation
        if self.geolocation:
            _dict['geolocation'] = self.geolocation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of forecast
        if self.forecast:
            _dict['forecast'] = self.forecast.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Forecast:
        """Create an instance of Forecast from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return Forecast.parse_obj(obj)

        _obj = Forecast.parse_obj({
            "geolocation": Geolocation.from_dict(obj.get("geolocation")) if obj.get("geolocation") is not None else None,
            "forecast": Forecast2.from_dict(obj.get("forecast")) if obj.get("forecast") is not None else None
        })
        return _obj

