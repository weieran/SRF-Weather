# coding: utf-8

"""
    SRF Weather

    SRF Meteo serves weather forecast for over 100'000 locations within Switzerland  # noqa: E501

    The version of the OpenAPI document: 1.0.4
    Contact: api@srgssr.ch
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, StrictInt, StrictStr

class GeolocationName(BaseModel):
    """
    GeolocationName
    """
    district: StrictStr = ...
    id: StrictStr = ...
    location_id: StrictStr = ...
    type: StrictStr = ...
    language: StrictInt = ...
    translation_type: StrictStr = ...
    name: StrictStr = ...
    country: StrictStr = ...
    province: StrictStr = ...
    inhabitants: StrictInt = ...
    height: StrictInt = ...
    ch: StrictInt = ...
    __properties = ["district", "id", "location_id", "type", "language", "translation_type", "name", "country", "province", "inhabitants", "height", "ch"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GeolocationName:
        """Create an instance of GeolocationName from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GeolocationName:
        """Create an instance of GeolocationName from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return GeolocationName.parse_obj(obj)

        _obj = GeolocationName.parse_obj({
            "district": obj.get("district"),
            "id": obj.get("id"),
            "location_id": obj.get("location_id"),
            "type": obj.get("type"),
            "language": obj.get("language"),
            "translation_type": obj.get("translation_type"),
            "name": obj.get("name"),
            "country": obj.get("country"),
            "province": obj.get("province"),
            "inhabitants": obj.get("inhabitants"),
            "height": obj.get("height"),
            "ch": obj.get("ch")
        })
        return _obj

