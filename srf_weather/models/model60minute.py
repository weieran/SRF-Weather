# coding: utf-8

"""
    SRF Weather

    SRF Meteo serves weather forecast for over 100'000 locations within Switzerland  # noqa: E501

    The version of the OpenAPI document: 1.0.4
    Contact: api@srgssr.ch
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictInt, StrictStr
from srf_weather.models.min_maxcolor import MinMaxcolor

class Model60minute(BaseModel):
    """
    Model60minute
    """
    local_date_time: StrictStr = ...
    ttt_c: StrictStr = Field(..., alias="TTT_C")
    ttl_c: StrictInt = Field(..., alias="TTL_C")
    tth_c: StrictInt = Field(..., alias="TTH_C")
    probpcp_percent: StrictStr = Field(..., alias="PROBPCP_PERCENT")
    rrr_mm: StrictStr = Field(..., alias="RRR_MM")
    ff_kmh: StrictStr = Field(..., alias="FF_KMH")
    fx_kmh: StrictStr = Field(..., alias="FX_KMH")
    dd_deg: StrictStr = Field(..., alias="DD_DEG")
    symbol_code: StrictInt = Field(..., alias="SYMBOL_CODE")
    type: StrictInt = ...
    cur_color: MinMaxcolor = ...
    __properties = ["local_date_time", "TTT_C", "TTL_C", "TTH_C", "PROBPCP_PERCENT", "RRR_MM", "FF_KMH", "FX_KMH", "DD_DEG", "SYMBOL_CODE", "type", "cur_color"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Model60minute:
        """Create an instance of Model60minute from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of cur_color
        if self.cur_color:
            _dict['cur_color'] = self.cur_color.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Model60minute:
        """Create an instance of Model60minute from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return Model60minute.parse_obj(obj)

        _obj = Model60minute.parse_obj({
            "local_date_time": obj.get("local_date_time"),
            "ttt_c": obj.get("TTT_C"),
            "ttl_c": obj.get("TTL_C"),
            "tth_c": obj.get("TTH_C"),
            "probpcp_percent": obj.get("PROBPCP_PERCENT"),
            "rrr_mm": obj.get("RRR_MM"),
            "ff_kmh": obj.get("FF_KMH"),
            "fx_kmh": obj.get("FX_KMH"),
            "dd_deg": obj.get("DD_DEG"),
            "symbol_code": obj.get("SYMBOL_CODE"),
            "type": obj.get("type"),
            "cur_color": MinMaxcolor.from_dict(obj.get("cur_color")) if obj.get("cur_color") is not None else None
        })
        return _obj

